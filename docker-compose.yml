version: '3.8'

services:
  # Reverse proxy for HTTPS termination
  nginx-proxy:
    image: jwilder/nginx-proxy:latest
    container_name: nginx-proxy
    restart: unless-stopped
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    environment:
      - DEFAULT_HOST=${DEFAULT_HOST:-syntextai.com}
    volumes:
      - /etc/nginx/certs:/etc/nginx/certs:ro
      - /etc/nginx/vhost.d
      - /usr/share/nginx/html
      - /var/run/docker.sock:/tmp/docker.sock:ro
    networks:
      - syntextai_network

  # SSL certificate management
  letsencrypt:
    image: nginxproxy/acme-companion
    container_name: letsencrypt
    restart: unless-stopped
    environment:
      - NGINX_PROXY_CONTAINER=nginx-proxy
      - ACME_CA_URI=https://acme-v02.api.letsencrypt.org/directory
    volumes:
      - /etc/nginx/certs:/etc/nginx/certs:rw
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /etc/nginx/vhost.d
      - /usr/share/nginx/html
    networks:
      - syntextai_network
    depends_on:
      - nginx-proxy

  # Main application (includes frontend and API)
  app:
    build:
      context: .
      dockerfile: Dockerfile
      # Build args are now passed via .env file
    container_name: syntextai-app
    restart: unless-stopped
    env_file: .env
    environment:
      - NODE_ENV=production
      - VIRTUAL_HOST=syntextai.com,www.syntextai.com
      - LETSENCRYPT_HOST=syntextai.com,www.syntextai.com
      - LETSENCRYPT_EMAIL=osas@osas-inc.com
      # Pass required environment variables
      - REACT_APP_FIREBASE_API_KEY
      - REACT_APP_FIREBASE_AUTH_DOMAIN
      - REACT_APP_FIREBASE_PROJECT_ID
      - REACT_APP_FIREBASE_STORAGE_BUCKET
      - REACT_APP_FIREBASE_MESSAGING_SENDER_ID
      - REACT_APP_FIREBASE_APP_ID
      - REACT_APP_STRIPE_API_KEY
      - REACT_APP_POST_HOG_API_KEY
    volumes:
      - ./api/config:/app/api/config:ro
      - /app/node_modules  # Preserve node_modules in container
    networks:
      - syntextai_network
    depends_on:
      - db
      - redis
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G

  # Background worker for async tasks
  worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: syntextai-worker
    command: python -m api.worker
    restart: unless-stopped
    env_file: .env
    environment:
      - NODE_ENV=production
      - MAX_CONCURRENT_TASKS=3
      - POLL_INTERVAL=10
    volumes:
      - ./api/config:/app/api/config:ro
    networks:
      - syntextai_network
    depends_on:
      - db
      - redis
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G

  # Search functionality
  searxng:
    image: searxng/searxng:latest
    container_name: searxng
    restart: unless-stopped
    environment:
      - INSTANCE_NAME=SynTextAI
      - VIRTUAL_HOST=search.syntextai.com
      - LETSENCRYPT_HOST=search.syntextai.com
      - LETSENCRYPT_EMAIL=osas@osas-inc.com
    volumes:
      - ./searxng:/etc/searxng:ro
    networks:
      - syntextai_network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 8G

  # PostgreSQL database
  db:
    image: postgres:15-alpine
    container_name: syntextai-db
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - syntextai_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and task queue
  redis:
    image: redis:7-alpine
    container_name: syntextai-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - syntextai_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  syntextai_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
