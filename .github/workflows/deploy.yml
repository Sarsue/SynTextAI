name: Deploy SynTextAI

on:
  push:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      deploy_message:
        description: 'Deployment message'
        required: false
        default: 'Manual deployment'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Display deployment information
      run: |
        echo "üöÄ Building and deploying SynTextAI"
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          echo "üìù Message: ${{ github.event.inputs.deploy_message }}"
        fi
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    # Prepare Firebase credentials for build
    - name: Create Firebase credentials directory
      run: |
        mkdir -p api/config
        # Write JSON directly using the 'cat' command with a heredoc
        # This preserves the exact format of the JSON without any shell interpretation
        cat > api/config/credentials.json << 'EOF'
        ${{ secrets.FIREBASE_CREDENTIALS_JSON }}
        EOF
        
        chmod 600 api/config/credentials.json
        # Verify JSON is valid
        cat api/config/credentials.json | python -c "import sys, json; json.load(sys.stdin)" || echo 'WARNING: Invalid JSON in credentials file!'
        
    # Create frontend .env file with Firebase web config
    - name: Create frontend environment file
      run: |
        cat << EOF > frontend/.env
        REACT_APP_FIREBASE_API_KEY=${{ secrets.REACT_APP_FIREBASE_API_KEY }}
        REACT_APP_FIREBASE_AUTH_DOMAIN=${{ secrets.REACT_APP_FIREBASE_AUTH_DOMAIN }}
        REACT_APP_FIREBASE_PROJECT_ID=${{ secrets.REACT_APP_FIREBASE_PROJECT_ID }}
        REACT_APP_FIREBASE_STORAGE_BUCKET=${{ secrets.REACT_APP_FIREBASE_STORAGE_BUCKET }}
        REACT_APP_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.REACT_APP_FIREBASE_MESSAGING_SENDER_ID }}
        REACT_APP_FIREBASE_APP_ID=${{ secrets.REACT_APP_FIREBASE_APP_ID }}
        EOF
        chmod 600 frontend/.env
    
    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: osasdeeon/syntextai:latest
        cache-from: type=registry,ref=osasdeeon/syntextai:buildcache
        cache-to: type=registry,ref=osasdeeon/syntextai:buildcache,mode=max
        build-args: |
          REACT_APP_FIREBASE_API_KEY=${{ secrets.REACT_APP_FIREBASE_API_KEY }}
          REACT_APP_FIREBASE_AUTH_DOMAIN=${{ secrets.REACT_APP_FIREBASE_AUTH_DOMAIN }}
          REACT_APP_FIREBASE_PROJECT_ID=${{ secrets.REACT_APP_FIREBASE_PROJECT_ID }}
          REACT_APP_FIREBASE_STORAGE_BUCKET=${{ secrets.REACT_APP_FIREBASE_STORAGE_BUCKET }}
          REACT_APP_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.REACT_APP_FIREBASE_MESSAGING_SENDER_ID }}
          REACT_APP_FIREBASE_APP_ID=${{ secrets.REACT_APP_FIREBASE_APP_ID }}
          REACT_APP_STRIPE_API_KEY=${{ secrets.REACT_APP_STRIPE_API_KEY }}

    - name: Copy deploy files to Digital Ocean
      uses: appleboy/scp-action@v0.1.3
      with:
        host: ${{ secrets.DO_HOST }}
        username: ${{ secrets.DO_USERNAME }}
        key: ${{ secrets.DO_SSH_KEY }}
        source: "deploy.sh,docker-compose.yml"
        target: "/home/root/"

    - name: Deploy to Digital Ocean
      uses: appleboy/ssh-action@v0.1.10
      with:
        host: ${{ secrets.DO_HOST }}
        username: ${{ secrets.DO_USERNAME }}
        key: ${{ secrets.DO_SSH_KEY }}
        script_stop: true
        script: |
          cd /home/root/
          docker pull osasdeeon/syntextai:latest
          
          # Recreate .env file from GitHub secrets
          echo "${{ secrets.ENV_FILE_CONTENT }}" > .env
          chmod 600 .env  # Secure file permissions
          
          # Create Firebase credentials directory and file
          mkdir -p api/config
          echo "${{ secrets.FIREBASE_CREDENTIALS_JSON }}" > api/config/credentials.json
          chmod 600 api/config/credentials.json
          
          # Make sure the deploy script is executable and run it
          chmod +x deploy.sh
          
          # Run deploy script - handle errors gracefully
          ./deploy.sh || { 
            echo "‚ö†Ô∏è Deploy script failed, but proceeding with container restart..."
            # Stop previous container if running
            docker-compose down || true
            # Start new container with updated image
            docker-compose up -d
          }
