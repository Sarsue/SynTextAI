name: Deploy SynTextAI

on:
  push:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      deploy_message:
        description: 'Deployment message'
        required: false
        default: 'Manual deployment'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Display deployment information
      run: |
        echo "🚀 Building and deploying SynTextAI"
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          echo "📝 Message: ${{ github.event.inputs.deploy_message }}"
        fi

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    # 🔹 Bootstrap step ensures Docker + Compose exist on fresh VM
    - name: Bootstrap VM (Docker + Docker Compose)
      uses: appleboy/ssh-action@v0.1.10
      with:
        host: ${{ secrets.DO_HOST }}
        username: ${{ secrets.DO_USERNAME }}
        key: ${{ secrets.DO_SSH_KEY }}
        script_stop: true
        script: |
          if ! command -v docker >/dev/null 2>&1; then
            echo "Installing Docker..."
            sudo apt-get update
            sudo apt-get install -y docker.io curl
            sudo systemctl enable --now docker
          fi

          if ! command -v docker-compose >/dev/null 2>&1; then
            echo "Installing Docker Compose..."
            DOCKER_COMPOSE_VERSION="v2.28.1"
            sudo curl -L "https://github.com/docker/compose/releases/download/$DOCKER_COMPOSE_VERSION/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
          fi

    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: osasdeeon/syntextai:latest
        cache-from: type=registry,ref=osasdeeon/syntextai:buildcache
        cache-to: type=registry,ref=osasdeeon/syntextai:buildcache,mode=max
        build-args: |
          REACT_APP_FIREBASE_API_KEY=${{ secrets.REACT_APP_FIREBASE_API_KEY }}
          REACT_APP_FIREBASE_AUTH_DOMAIN=${{ secrets.REACT_APP_FIREBASE_AUTH_DOMAIN }}
          REACT_APP_FIREBASE_PROJECT_ID=${{ secrets.REACT_APP_FIREBASE_PROJECT_ID }}
          REACT_APP_FIREBASE_STORAGE_BUCKET=${{ secrets.REACT_APP_FIREBASE_STORAGE_BUCKET }}
          REACT_APP_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.REACT_APP_FIREBASE_MESSAGING_SENDER_ID }}
          REACT_APP_FIREBASE_APP_ID=${{ secrets.REACT_APP_FIREBASE_APP_ID }}
          REACT_APP_STRIPE_API_KEY=${{ secrets.REACT_APP_STRIPE_API_KEY }}
          REACT_APP_POST_HOG_API_KEY=${{ secrets.REACT_APP_POST_HOG_API_KEY }}

    - name: Copy deploy files to Digital Ocean
      uses: appleboy/scp-action@v0.1.3
      with:
        host: ${{ secrets.DO_HOST }}
        username: ${{ secrets.DO_USERNAME }}
        key: ${{ secrets.DO_SSH_KEY }}
        source: "deploy.sh,docker-compose.yml"
        target: "/home/root/"

    - name: Deploy to Digital Ocean
      uses: appleboy/ssh-action@v0.1.10
      with:
        host: ${{ secrets.DO_HOST }}
        username: ${{ secrets.DO_USERNAME }}
        key: ${{ secrets.DO_SSH_KEY }}
        timeout: 3600  # 1 hour timeout
        script_stop: true
        script: |
          set -e
          cd /home/root/
          
          echo "🚀 Starting deployment process..."
          
          # Ensure deploy script is executable
          chmod +x deploy.sh || true
          
          # Ensure .env file exists
          if [ ! -f /home/root/.env ] && [ -n "${{ secrets.ENV_FILE_CONTENT }}" ]; then
              echo "ℹ️ Creating .env file from secrets..."
              echo "${{ secrets.ENV_FILE_CONTENT }}" > /home/root/.env
              chmod 600 /home/root/.env
          fi
          
          # Ensure Firebase credentials exist
          if [ ! -f /home/root/api/config/credentials.json ] && [ -n "${{ secrets.FIREBASE_CREDENTIALS_JSON }}" ]; then
              echo "ℹ️ Setting up Firebase credentials..."
              mkdir -p /home/root/api/config
              echo "${{ secrets.FIREBASE_CREDENTIALS_JSON }}" > /home/root/api/config/credentials.json
              chmod 600 /home/root/api/config/credentials.json
          fi
          
          # Run the deployment script with error handling
          echo "🚀 Running deployment script..."
          if ! ./deploy.sh; then
              echo "❌ Deployment script failed. Attempting fallback..."
              # Fallback: Try to ensure the app is running with the current setup
              cd /home/root/app || cd /home/root
              docker compose down || true
              docker compose up -d --force-recreate
              
              # Verify the app is running
              if ! docker ps | grep -q syntextaiapp; then
                  echo "❌ Fallback deployment failed. Check logs and try again."
                  exit 1
              fi
              echo "⚠️  Fallback deployment completed with manual container restart"
          else
              echo "✅ Deployment completed successfully!"
          fi
          
          # Final verification
          echo "🔍 Verifying deployment..."
          cd /home/root/app || cd /home/root
          if ! docker ps | grep -q syntextaiapp; then
              echo "❌ Application container is not running after deployment!"
              echo "📋 Container status:"
              docker ps -a
              echo "📜 Application logs:"
              docker compose logs || true
              exit 1
          fi
          
          echo "🚀 Deployment verification complete!"
