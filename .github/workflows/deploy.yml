name: Deploy SynTextAI

on:
  push:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      deploy_message:
        description: 'Deployment message'
        required: false
        default: 'Manual deployment'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
      # 1️⃣ Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # 2️⃣ Display deployment info
      - name: Display deployment info
        run: |
          echo "🚀 Building and deploying SynTextAI"
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "📝 Message: ${{ github.event.inputs.deploy_message }}"
          fi

      # 3️⃣ Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # 4️⃣ Login to DockerHub
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      # 5️⃣ Build & push Docker image
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: osasdeeon/syntextai:latest
          cache-from: type=registry,ref=osasdeeon/syntextai:buildcache
          cache-to: type=registry,ref=osasdeeon/syntextai:buildcache,mode=max
          build-args: |
            REACT_APP_FIREBASE_API_KEY=${{ secrets.REACT_APP_FIREBASE_API_KEY }}
            REACT_APP_FIREBASE_AUTH_DOMAIN=${{ secrets.REACT_APP_FIREBASE_AUTH_DOMAIN }}
            REACT_APP_FIREBASE_PROJECT_ID=${{ secrets.REACT_APP_FIREBASE_PROJECT_ID }}
            REACT_APP_FIREBASE_STORAGE_BUCKET=${{ secrets.REACT_APP_FIREBASE_STORAGE_BUCKET }}
            REACT_APP_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.REACT_APP_FIREBASE_MESSAGING_SENDER_ID }}
            REACT_APP_FIREBASE_APP_ID=${{ secrets.REACT_APP_FIREBASE_APP_ID }}
            REACT_APP_STRIPE_API_KEY=${{ secrets.REACT_APP_STRIPE_API_KEY }}
            REACT_APP_POST_HOG_API_KEY=${{ secrets.REACT_APP_POST_HOG_API_KEY }}
            FIREBASE_CREDENTIALS_JSON=${{ secrets.FIREBASE_CREDENTIALS_JSON }}

      # 6️⃣ Copy deploy files to server
      - name: Copy deploy files to DigitalOcean
        uses: appleboy/scp-action@v0.1.3
        with:
          host: ${{ secrets.DO_HOST }}
          username: ${{ secrets.DO_USERNAME }}
          key: ${{ secrets.DO_SSH_KEY }}
          source: "deploy.sh,docker-compose.yml"
          target: "/home/root/"

      # 7️⃣ Deploy to server
      - name: Deploy to DigitalOcean
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.DO_HOST }}
          username: ${{ secrets.DO_USERNAME }}
          key: ${{ secrets.DO_SSH_KEY }}
          script_stop: true
          script: |
            set -e
            cd /home/root/

            # Create required directories
            mkdir -p frontend api/config

            # Write .env from GitHub secrets
            {
              echo "POSTGRES_DB=\"${{ secrets.POSTGRES_DB }}\""
              echo "POSTGRES_USER=\"${{ secrets.POSTGRES_USER }}\""
              echo "POSTGRES_PASSWORD=\"${{ secrets.POSTGRES_PASSWORD }}\""
              echo "REDIS_PASSWORD=\"${{ secrets.REDIS_PASSWORD }}\""
              echo "REACT_APP_FIREBASE_API_KEY=\"${{ secrets.REACT_APP_FIREBASE_API_KEY }}\""
              echo "REACT_APP_FIREBASE_AUTH_DOMAIN=\"${{ secrets.REACT_APP_FIREBASE_AUTH_DOMAIN }}\""
              echo "REACT_APP_FIREBASE_PROJECT_ID=\"${{ secrets.REACT_APP_FIREBASE_PROJECT_ID }}\""
              echo "REACT_APP_FIREBASE_STORAGE_BUCKET=\"${{ secrets.REACT_APP_FIREBASE_STORAGE_BUCKET }}\""
              echo "REACT_APP_FIREBASE_MESSAGING_SENDER_ID=\"${{ secrets.REACT_APP_FIREBASE_MESSAGING_SENDER_ID }}\""
              echo "REACT_APP_FIREBASE_APP_ID=\"${{ secrets.REACT_APP_FIREBASE_APP_ID }}\""
              echo "REACT_APP_STRIPE_API_KEY=\"${{ secrets.REACT_APP_STRIPE_API_KEY }}\""
              echo "REACT_APP_POST_HOG_API_KEY=\"${{ secrets.REACT_APP_POST_HOG_API_KEY }}\""
            } > .env

            # Set environment variables with defaults inside Bash
            FIREBASE_PROJECT_ID="${{ secrets.FIREBASE_PROJECT_ID }}"
            FIREBASE_PRIVATE_KEY="${{ secrets.FIREBASE_PRIVATE_KEY }}"
            FIREBASE_CLIENT_EMAIL="${{ secrets.FIREBASE_CLIENT_EMAIL }}"
            FIREBASE_PRIVATE_KEY_ID="${{ secrets.FIREBASE_PRIVATE_KEY_ID }}"
            FIREBASE_CLIENT_ID="${{ secrets.FIREBASE_CLIENT_ID }}"
            FIREBASE_CLIENT_CERT_URL="${{ secrets.FIREBASE_CLIENT_CERT_URL }}"
            FIREBASE_AUTH_URI="${FIREBASE_AUTH_URI:-https://accounts.google.com/o/oauth2/auth}"
            FIREBASE_TOKEN_URI="${FIREBASE_TOKEN_URI:-https://oauth2.googleapis.com/token}"
            FIREBASE_AUTH_PROVIDER_CERT_URL="${FIREBASE_AUTH_PROVIDER_CERT_URL:-https://www.googleapis.com/oauth2/v1/certs}"

            echo "FIREBASE_PROJECT_ID=\"$FIREBASE_PROJECT_ID\"" >> .env
            echo "FIREBASE_PRIVATE_KEY=\"$FIREBASE_PRIVATE_KEY\"" >> .env
            echo "FIREBASE_CLIENT_EMAIL=\"$FIREBASE_CLIENT_EMAIL\"" >> .env
            echo "FIREBASE_PRIVATE_KEY_ID=\"$FIREBASE_PRIVATE_KEY_ID\"" >> .env
            echo "FIREBASE_CLIENT_ID=\"$FIREBASE_CLIENT_ID\"" >> .env
            echo "FIREBASE_CLIENT_CERT_URL=\"$FIREBASE_CLIENT_CERT_URL\"" >> .env
            echo "FIREBASE_AUTH_URI=\"$FIREBASE_AUTH_URI\"" >> .env
            echo "FIREBASE_TOKEN_URI=\"$FIREBASE_TOKEN_URI\"" >> .env
            echo "FIREBASE_AUTH_PROVIDER_CERT_URL=\"$FIREBASE_AUTH_PROVIDER_CERT_URL\"" >> .env

            chmod 600 .env

            # Write Firebase credentials file for backward compatibility
            cat > api/config/credentials.json << 'CREDENTIALS_EOF'
${{ secrets.FIREBASE_CREDENTIALS_JSON }}
CREDENTIALS_EOF
            chmod 600 api/config/credentials.json

            # Make deploy script executable and run
            chmod +x deploy.sh
            ./deploy.sh
