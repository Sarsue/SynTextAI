name: Deploy SynTextAI

on:
  push:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      deploy_message:
        description: 'Deployment message'
        required: false
        default: 'Manual deployment'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Display deployment information
      run: |
        echo "🚀 Building and deploying SynTextAI"
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          echo "📝 Message: ${{ github.event.inputs.deploy_message }}"
        fi

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    # 🔹 Bootstrap step ensures Docker + Compose exist on fresh VM
    - name: Bootstrap VM (Docker + Docker Compose)
      uses: appleboy/ssh-action@v0.1.10
      with:
        host: ${{ secrets.DO_HOST }}
        username: ${{ secrets.DO_USERNAME }}
        key: ${{ secrets.DO_SSH_KEY }}
        script_stop: true
        script: |
          if ! command -v docker >/dev/null 2>&1; then
            echo "Installing Docker..."
            sudo apt-get update
            sudo apt-get install -y docker.io curl
            sudo systemctl enable --now docker
          fi

          if ! command -v docker-compose >/dev/null 2>&1; then
            echo "Installing Docker Compose..."
            DOCKER_COMPOSE_VERSION="v2.28.1"
            sudo curl -L "https://github.com/docker/compose/releases/download/$DOCKER_COMPOSE_VERSION/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
          fi

    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: osasdeeon/syntextai:latest
        cache-from: type=registry,ref=osasdeeon/syntextai:buildcache
        cache-to: type=registry,ref=osasdeeon/syntextai:buildcache,mode=max
        build-args: |
          REACT_APP_FIREBASE_API_KEY=${{ secrets.REACT_APP_FIREBASE_API_KEY }}
          REACT_APP_FIREBASE_AUTH_DOMAIN=${{ secrets.REACT_APP_FIREBASE_AUTH_DOMAIN }}
          REACT_APP_FIREBASE_PROJECT_ID=${{ secrets.REACT_APP_FIREBASE_PROJECT_ID }}
          REACT_APP_FIREBASE_STORAGE_BUCKET=${{ secrets.REACT_APP_FIREBASE_STORAGE_BUCKET }}
          REACT_APP_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.REACT_APP_FIREBASE_MESSAGING_SENDER_ID }}
          REACT_APP_FIREBASE_APP_ID=${{ secrets.REACT_APP_FIREBASE_APP_ID }}
          REACT_APP_STRIPE_API_KEY=${{ secrets.REACT_APP_STRIPE_API_KEY }}
          REACT_APP_POST_HOG_API_KEY=${{ secrets.REACT_APP_POST_HOG_API_KEY }}

    - name: Copy deploy files to Digital Ocean
      uses: appleboy/scp-action@v0.1.3
      with:
        host: ${{ secrets.DO_HOST }}
        username: ${{ secrets.DO_USERNAME }}
        key: ${{ secrets.DO_SSH_KEY }}
        source: "deploy.sh,docker-compose.yml"
        target: "/home/root/"

    - name: Deploy to Digital Ocean
      uses: appleboy/ssh-action@v0.1.10
      with:
        host: ${{ secrets.DO_HOST }}
        username: ${{ secrets.DO_USERNAME }}
        key: ${{ secrets.DO_SSH_KEY }}
        script_stop: true
        script: |
          cd /home/root/
          docker pull osasdeeon/syntextai:latest
          
          # Recreate .env file from GitHub secrets
          echo "${{ secrets.ENV_FILE_CONTENT }}" > .env
          chmod 600 .env
          
          # Firebase service account (optional if you use admin SDK)
          mkdir -p api/config
          echo "${{ secrets.FIREBASE_CREDENTIALS_JSON }}" > api/config/credentials.json
          chmod 600 api/config/credentials.json
          
          # Run deploy script (installs Nginx, certbot, sets SSL, runs containers)
          chmod +x deploy.sh
          ./deploy.sh
